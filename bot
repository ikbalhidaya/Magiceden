const ethers = require('ethers');
const puppeteer = require('puppeteer');
const dotenv = require('dotenv');
const CONFIG = require("./utils/config.js");
const displayHeader = require("./src/displayHeader");

dotenv.config();
displayHeader();

const RPC_URL = CONFIG.RPC_URL;
const EXPLORER_URL = 'https://testnet.monadexplorer.com/tx/';
const GAS_LIMIT = 500000;
const MAX_RETRY = 5; // Increase retry for better reliability
const RETRY_DELAY = 1000; // Slightly longer delay to avoid rate limits
const MAX_CONCURRENT_TX = 10;
const GAS_MULTIPLIER = 2.5; // Adjusted to avoid overpaying

const provider = new ethers.providers.JsonRpcProvider(RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

const REQUEST_HEADERS = {
  'accept': 'application/json, text/plain, */*',
  'accept-encoding': 'gzip, deflate, br, zstd',
  'accept-language': 'en-US,en;q=0.9,id;q=0.8',
  'origin': 'https://magiceden.io',
  'referer': 'https://magiceden.io/',
  'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',
};

async function executeTransaction(txData) {
  for (let attempt = 1; attempt <= MAX_RETRY; attempt++) {
    try {
      console.log(`Attempt ${attempt}: Sending transaction...`);
      const tx = await wallet.sendTransaction(txData);
      await tx.wait();
      console.log(`Transaction successful: ${EXPLORER_URL}${tx.hash}`);
      return tx.hash;
    } catch (error) {
      console.error(`Error in attempt ${attempt}:`, error);
      if (attempt < MAX_RETRY) await new Promise(res => setTimeout(res, RETRY_DELAY));
      else throw new Error("Transaction failed after max retries");
    }
  }
}

(async () => {
  console.log("Launching browser...");
  const browser = await puppeteer.launch({ headless: true, args: ["--no-sandbox"] });
  const page = await browser.newPage();
  await page.setExtraHTTPHeaders(REQUEST_HEADERS);

  try {
    console.log("Navigating to Magic Eden...");
    await page.goto("https://magiceden.io", { waitUntil: "networkidle2" });
    
    // Example automation: Clicking a mint button (adjust selector as needed)
    await page.waitForSelector(".mint-button", { timeout: 5000 });
    await page.click(".mint-button");
    console.log("Clicked mint button!");
  } catch (error) {
    console.error("Error automating browser:", error);
  } finally {
    await browser.close();
    console.log("Browser closed.");
  }
})();
